name: ACEest Fitness CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  IMAGE_NAME: aceest-fitness-app
  REGISTRY: ghcr.io

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run linting with flake8
        run: |
          pip install flake8
          # Stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # Exit-zero treats all errors as warnings
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

      - name: Run unit tests with pytest
        run: |
          pytest test_app.py -v --tb=short --cov=app --cov-report=term-missing
        env:
          FLASK_ENV: testing

      - name: Generate test report
        if: always()
        run: |
          pytest test_app.py --junitxml=test-results.xml --cov=app --cov-report=xml

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: |
            test-results.xml
            coverage.xml

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install safety bandit
          pip install -r requirements.txt

      - name: Run safety check (dependency vulnerabilities)
        run: |
          safety check --json --output safety-report.json || true
          cat safety-report.json

      - name: Run bandit security linter
        run: |
          bandit -r . -f json -o bandit-report.json || true
          cat bandit-report.json

  build:
    name: Build and Test Docker Image
    runs-on: ubuntu-latest
    needs: [test, security]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        run: |
          docker build -t ${{ env.IMAGE_NAME }}:latest .

      - name: Test Docker image
        run: |
          # Start the container in background
          docker run -d --name test-container -p 5000:5000 ${{ env.IMAGE_NAME }}:latest

          # Wait for application to start
          sleep 10

          # Test health endpoint
          curl -f http://localhost:5000/health || exit 1

          # Test main application
          curl -f http://localhost:5000/ || exit 1

          # Stop and remove container
          docker stop test-container
          docker rm test-container

      - name: Run tests inside Docker container
        run: |
          # Create a temporary container to run tests
          docker run --rm -v $(pwd):/app -w /app ${{ env.IMAGE_NAME }}:latest \
            sh -c "python -m pytest test_app.py -v"

      - name: Scan Docker image for vulnerabilities
        uses: docker/scout-action@v1
        if: github.event_name != 'pull_request'
        with:
          command: cves
          image: ${{ env.IMAGE_NAME }}:latest
          only-severities: critical,high

      - name: Export Docker image
        run: |
          docker save ${{ env.IMAGE_NAME }}:latest -o aceest-fitness-image.tar

      - name: Upload Docker image artifact
        uses: actions/upload-artifact@v3
        with:
          name: docker-image
          path: aceest-fitness-image.tar
          retention-days: 5

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment: staging

    steps:
      - name: Download Docker image
        uses: actions/download-artifact@v3
        with:
          name: docker-image

      - name: Load Docker image
        run: |
          docker load -i aceest-fitness-image.tar

      - name: Deploy to staging (simulation)
        run: |
          echo "üöÄ Deploying to staging environment..."
          echo "Image: ${{ env.IMAGE_NAME }}:latest"
          echo "Environment: Staging"
          echo "URL: https://staging.aceest-fitness.com"
          # In real deployment, this would push to staging registry
          # and deploy to staging environment

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
      - name: Download Docker image
        uses: actions/download-artifact@v3
        with:
          name: docker-image

      - name: Load Docker image
        run: |
          docker load -i aceest-fitness-image.tar

      - name: Deploy to production (simulation)
        run: |
          echo "üöÄ Deploying to production environment..."
          echo "Image: ${{ env.IMAGE_NAME }}:latest"
          echo "Environment: Production"
          echo "URL: https://aceest-fitness.com"
          # In real deployment, this would push to production registry
          # and deploy to production environment

      - name: Create GitHub Release
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release v${{ github.run_number }}
          body: |
            ## üéâ New Release - ACEest Fitness v${{ github.run_number }}

            ### What's New
            - Deployed from commit: ${{ github.sha }}
            - Build number: ${{ github.run_number }}
            - Workflow run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

            ### üß™ Tests
            All tests passed ‚úÖ

            ### üê≥ Docker
            Docker image built and tested successfully

            ### üìä Deployment
            - Staging: ‚úÖ Deployed
            - Production: ‚úÖ Deployed
          draft: false
          prerelease: false

  notification:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [test, build, deploy-production]
    if: always()

    steps:
      - name: Notification Success
        if: needs.test.result == 'success' && needs.build.result == 'success'
        run: |
          echo "‚úÖ Pipeline completed successfully!"
          echo "üéâ ACEest Fitness application is ready!"
          echo "üìä All tests passed"
          echo "üê≥ Docker image built successfully"
          echo "üöÄ Deployment completed"

      - name: Notification Failure
        if: failure()
        run: |
          echo "‚ùå Pipeline failed!"
          echo "üîç Check the logs for details"
          echo "üõ†Ô∏è Fix the issues and try again"
